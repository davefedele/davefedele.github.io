<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Dave Fedele - Memoize</title><description>A place to keep the answers for things I shouldn't forget.</description><link>http://localhost:2368/</link><generator>Ghost 0.5</generator><lastBuildDate>Sun, 25 Jan 2015 00:54:04 GMT</lastBuildDate><atom:link href="http://localhost:2368/author/dave/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>MVP Project</title><description>&lt;p&gt;Blood. Sweat. Tears. And Success. That's how you can sum up the MVP project. It's a project where students get the opportunity to test what they know and ultimately, discover their strengths and weaknesses.&lt;/p&gt;

&lt;p&gt;MVP stands for minimum viable product. Essentially, we choose an idea for a web application that we'd like to build. We imagine what can be done in 24 hours and then cut the scope down. Then, we cut the scope again. Remember, this is not the full-blown feature rich application of our dreams. Rather it's the bare minimum to get the idea across and something that can be accomplished in a little over 24 hours.&lt;/p&gt;

&lt;p&gt;My idea was for an application to compare two foods to see which one was better nutritionally. I thought of the convenience of pulling out a phone and seeing which foods fit your lifestyle. Less fat and carbohydrates if you want to lose weight, or more protein and other nutrients to bulk up. I wanted to have user accounts so one could store the foods they ate that day and see a record of food and nutrient intake. Also, I wanted pretty pictures and hoped to used a popular javascript library, D3, to present the information to my users. Ultimately, I condensed the scope to just two input fields and a submit button. &lt;/p&gt;

&lt;p&gt;This was the first sprint where we didn't have a starting code base. Zilch. Nada. No tests to guide the way. The training wheels were removed. I struggled for hours starting in one direction, hitting a roadblock, and then altering my course. I felt incapable, struggled with the technology, and constantly questioned by abilities. I kept trying and failing. Trying and failing. But I pushed onward. Once I started making a little progress I finally found my groove. Baby steps were the key.&lt;/p&gt;

&lt;p&gt;I got my server setup and could hit my index page. Awesome! I was able to use the api for accessing data. Success. Next, angular was working on my page and was displaying the  results. Feeling more confident now. Then I finished by trying to add some some decent styling to the site. Not too shabby. Things were finally coming together. When all was said and done, I finished. I completed my MVP.&lt;/p&gt;

&lt;p&gt;I feel that the main point of this sprint was not to actually make a product, but to test yourself. This was the first time we had the opportunity to try our newly adopted skills in an open environment. It was difficult, scary, but in the end it was a huge growth experience. I've learned to take baby steps, trust in yourself, and push though the failures to find the successes. &lt;/p&gt;

&lt;p&gt;It's solidified the valuable concept that Hack Reactor has been constantly echoing; The path to mastering something involves failure. And a lot of it! It's what you do with those failures that determines who you become.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://foodfight.azurewebsites.net/"&gt;My MVP - Food Fight&lt;/a&gt;&lt;/p&gt;</description><link>http://localhost:2368/mvp-project/</link><guid isPermaLink="false">1fbe1b4d-5742-4d72-a187-f8f1cb584f7a</guid><dc:creator>Dave Fedele</dc:creator><pubDate>Sun, 25 Jan 2015 00:52:23 GMT</pubDate></item><item><title>Adding it all up</title><description>&lt;p&gt;There comes a time in every programmer's life when they need to increment a variable. How they do it can have a profound effect on how they expect the code following to behave.&lt;/p&gt;

&lt;h3 id="caseinpointvs"&gt;Case-in-point: ++  vs +=&lt;/h3&gt;

&lt;p&gt;Take a peak at the simple function below. I've created a variable count that is assigned a value of 0 . Then I've added 1 to count using &lt;strong&gt;count++&lt;/strong&gt; and next, &lt;strong&gt;count+=1&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var test = function(){
    var count = 0;
    console.log("starting value ", count);
    var countPlusPlus = count++;
    console.log("count++   ", countPlusPlus);
    var countPlusEqualsOne = count +=1;
    console.log("count +=1 ", countPlusEqualsOne);
};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the output:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    =&gt; starting value  0
    =&gt; count++    0
    =&gt; count +=1  2&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The count++ variable is &lt;strong&gt;not&lt;/strong&gt; incremented instantaneously, as you might expect (or at least I did in the beginning). You can see the value logged to the terminal is 0 . You'll also notice that count+=1 logged 2 as it's value. That's because once count+=1 accessed the variable count, it had already been incremented to 1 from the count++ operation. &lt;/p&gt;

&lt;p&gt;This could definitely rain on your parade if you weren't expecting this. I ran into this problem when storing key:value pairs where I wanted the key to be incremented at the moment of storage:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var count = 0, storage = {};
    storage[count++] = "value";&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;    =&amp;gt; storage = {0: "value"}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A better way would be to use &lt;strong&gt;count+=1&lt;/strong&gt; . This would increment my variable instantaneously and would simplify my code by not needing an additional line for variable incrementing.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    var count = 0, storage = {};
    storage[count+=1] = "value";&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;    =&amp;gt; storage = {1: "value"}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note - This also applies to &lt;strong&gt;--&lt;/strong&gt; and &lt;strong&gt;-=&lt;/strong&gt; operations. It just happens that people seem more excited to talk about addition instead of subtraction. Go figure!&lt;/em&gt;&lt;/p&gt;

&lt;h6 id="andthevariableincrementingprogrammerslivedhappilyeveryafter"&gt;And the variable incrementing programmers lived happily every after.&lt;/h6&gt;

&lt;h3 id="theend"&gt;The End&lt;/h3&gt;</description><link>http://localhost:2368/adding-it-all-up/</link><guid isPermaLink="false">b4b0bdf0-d3b6-410a-b2ed-a761180a424e</guid><dc:creator>Dave Fedele</dc:creator><pubDate>Sun, 28 Dec 2014 21:28:36 GMT</pubDate></item></channel></rss>